#!/usr/bin/env ruby
require "libdolt"
require "tiltout"
require "thin"
require "sinatra/base"
require "cgi"
require "main"

### TODO: Extract this into a testable API


class DoltApp
  def initialize(layout_base)
    @layout_base = layout_base
  end

  def is_git_repo?(dir)
    File.exists?(File.join(dir, ".git"))
  end

  def create_app(dir, view)
    if is_git_repo?(dir)
      dir = File.expand_path(dir)
      resolver = Dolt::DiskRepoResolver.new(File.dirname(dir))
      actions = Dolt::RepoActions.new(resolver)
      view.helper(Dolt::View::SingleRepository)
      require "dolt/sinatra/single_repo_browser"
      Dolt::Sinatra::SingleRepoBrowser.new(File.basename(dir), actions, view)
    else
      resolver = Dolt::DiskRepoResolver.new(dir)
      actions = Dolt::RepoActions.new(resolver)
      view.helper(Dolt::View::MultiRepository)
      require "dolt/sinatra/multi_repo_browser"
      Dolt::Sinatra::MultiRepoBrowser.new(actions, view)
    end
  end

  def run(root, options)
    view = Tiltout.new(Dolt.template_dir, {
        :cache => false,
        :layout => "layout"
      })

    view.helper(Dolt::View::Object)
    view.helper(Dolt::View::Urls)
    view.helper(Dolt::View::Blob)
    view.helper(Dolt::View::Blame)
    view.helper(Dolt::View::Breadcrumb)
    view.helper(Dolt::View::Tree)
    view.helper(Dolt::View::Commit)
    view.helper(Dolt::View::Gravatar)
    view.helper(Dolt::View::TabWidth)
    view.helper(Dolt::View::BinaryBlobEmbedder)
    view.helper(:tab_width => 4, :maxdepth => 3)

    # Configure blob rendering module

    # Attempt to syntax highlight every blob
    # view.helper(Dolt::View::SyntaxHighlight)

    # Attempt to render every blob as markup
    # view.helper(Dolt::View::Markup)

    # Render supported formats as markup, syntax highlight the rest
    view.helper(Dolt::View::SmartBlobRenderer)
    Sinatra::Base.set(:public_folder, File.join(@layout_base, "vendor/ui"))
    server = create_app(root, view)
    if options[:socket]
      Thin::Server.start(options[:socket], server)
    else
      Thin::Server.start("0.0.0.0", options[:port], server)
    end
  end
end

Main {
  argument("root") {
    required
    validate {|dir| File.exists?(dir) }
    description "The base diretory to serve repositories from"
  }

  option("socket=[socket]") {
    cast :string
    description "A socket to listen to"
  }

  option("port=[port]") {
    cast :int
    description "A port to listen to"
    default 3000
  }

  def run
    options = {}
    if params[:socket].given?
      options[:socket] = params[:socket].value
    else
      options[:port] = params[:port].value
    end
    DoltApp.new(File.join(File.dirname(__FILE__), "..")).run(params[:root].value, options)
  end
}
