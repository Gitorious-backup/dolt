#!/usr/bin/env ruby
require "libdolt"
require "tiltout"
require "thin"
require "sinatra/base"
require "cgi"
require "main"
if RUBY_VERSION < "1.9"
  require "dolt/ruby19"
end
### TODO: Extract this into a testable API


class DoltApp
  def initialize(layout_base)
    @layout_base = layout_base
  end

  def is_git_repo?(dir)
    Dolt::Git.git_repo?(dir)
  end

  def create_app(dir, view)
    if is_git_repo?(dir)
      dir = File.expand_path(dir)
      resolver = Dolt::DiskRepoResolver.new(File.dirname(dir))
      actions = Dolt::RepoActions.new(resolver)
      view.helper(Dolt::View::SingleRepository)
      require "dolt/sinatra/single_repo_browser"
      Dolt::Sinatra::SingleRepoBrowser.new(File.basename(dir), actions, view)
    else
      resolver = Dolt::DiskRepoResolver.new(dir)
      actions = Dolt::RepoActions.new(resolver)
      view.helper(Dolt::View::MultiRepository)
      require "dolt/sinatra/multi_repo_browser"
      Dolt::Sinatra::MultiRepoBrowser.new(actions, view)
    end
  end

  def run(root, options)
    view = Tiltout.new(Dolt.template_dir, {
        :cache => false,
        :layout => "layout"
      })

    view.helper(Dolt::View::Object)
    view.helper(Dolt::View::Urls)
    view.helper(Dolt::View::Blob)
    view.helper(Dolt::View::Blame)
    view.helper(Dolt::View::Breadcrumb)
    view.helper(Dolt::View::Tree)
    view.helper(Dolt::View::Commit)
    view.helper(Dolt::View::Gravatar)
    view.helper(Dolt::View::TabWidth)
    view.helper(Dolt::View::BinaryBlobEmbedder)
    view.helper(:tab_width => options[:tab_width], :maxdepth => 3)

    # Configure blob rendering module

    # Attempt to syntax highlight every blob
    # view.helper(Dolt::View::SyntaxHighlight)

    # Attempt to render every blob as markup
    # view.helper(Dolt::View::Markup)

    # Render supported formats as markup, syntax highlight the rest
    view.helper(Dolt::View::SmartBlobRenderer)
    Sinatra::Base.set(:public_folder, File.join(@layout_base, "vendor/ui"))
    server = create_app(root, view)
    thin_server = if options[:socket]
                    Thin::Server.new(options[:socket], server)
                  else
                    Thin::Server.new(options[:ip], options[:port], server)
                  end
    if options[:pidfile]
      thin_server.pid_file = options[:pidfile]
      thin_server.log_file = options[:logfile]
      thin_server.daemonize
    end
    puts ">> Starting Dolt #{Dolt::VERSION} from #{root}"
    begin
      thin_server.start
    rescue RuntimeError => e
      abort "\nUnable to start Dolt. Message:\n- #{e}\n\n"
    end
  end
end

Main {
  argument("root") {
    required
    validate {|dir| File.exists?(dir) }
    description "The base directory to serve repositories from"
  }

  option("socket=[socket]") {
    cast :string
    description "A socket to listen to"
  }

  option("port=[port]") {
    cast :int
    description "A port to listen to"
  }

  option("bind=[bind]") {
    description "An IP address to bind to"
    default "0.0.0.0"
  }

  option("tabwidth=[tabwidth]") {
    cast :int
    description "The number of spaces to use as a tab"
    default 4
  }

  option("pidfile=[pidfile]") {
    description "Run as daemon with pidfile stored here."
  }

  option("logfile=[logfile]") {
    description "Use as log file. Assumes --pidfile option"
  }

  environment("IP") {
    description "An IP address to bind to"
  }

  environment("PORT") {
    description "A port to listen on"
    cast :int
  }

  # Use option if given, otherwise ENV var if given, otherwise default value
  def option(param, env, default)
    return params[param].value if params[param].given?
    return params[env].value || default
  end

  def run
    options = {}
    if params[:socket].given?
      options[:socket] = params[:socket].value
    else
      options[:port] = option(:port, :PORT, 3000)
      options[:ip] = option(:bind, :IP, "0.0.0.0")
    end
    if params[:pidfile].given?
      options[:pidfile] = params[:pidfile].value
      options[:logfile] = params[:logfile].value || "/tmp/dolt.log"
    end
    options[:tab_width] = params[:tabwidth].value
    root = File.expand_path(params[:root].value)
    DoltApp.new(File.join(File.dirname(__FILE__), "..")).run(root, options)
  end
}
